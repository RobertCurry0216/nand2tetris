// bootstrap
@261
D=A
@SP
M=D
@LCL
M=0
@ARG
M=0
@THIS
M=0
@THAT
M=0
@Sys.init
0;JMP
// function Main.fibonacci 0
(Main.fibonacci)
@SP
D=M
@LCL
AM=D
D=A
@SP
M=D
// push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@is-lt-13
D;JLT
@end-13
D=0;JMP
(is-lt-13)
D=-1
(end-13)
@SP
A=M-1
M=D
// if-goto Main.fibonacci.IF_TRUE
@SP
AM=M-1
D=M
@Main.fibonacci.IF_TRUE$14
D;JEQ
@Main.fibonacci.IF_TRUE
0;JMP
(Main.fibonacci.IF_TRUE$14)
// goto Main.fibonacci.IF_FALSE
@Main.fibonacci.IF_FALSE
0;JMP
// label Main.fibonacci.IF_TRUE
(Main.fibonacci.IF_TRUE)
// push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@SP
A=M-1
D=M
@ARG
A=M
M=D
@LCL
D=M
@SP
M=D
@ARG
D=M+1
@R14
M=D
@SP
AM=M-1
D=M
@THAT
M=D
@SP
AM=M-1
D=M
@THIS
M=D
@SP
AM=M-1
D=M
@ARG
M=D
@SP
AM=M-1
D=M
@LCL
M=D
@SP
AM=M-1
D=M
@R15
M=D
@R14
D=M
@SP
M=D
@R15
A=M;JMP
// label Main.fibonacci.IF_FALSE
(Main.fibonacci.IF_FALSE)
// push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@Main.fibonacci$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.23)
// push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@Main.fibonacci$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.27)
// add
@SP
AM=M-1
D=M
A=A-1
M=D+M
// return
@SP
A=M-1
D=M
@ARG
A=M
M=D
@LCL
D=M
@SP
M=D
@ARG
D=M+1
@R14
M=D
@SP
AM=M-1
D=M
@THAT
M=D
@SP
AM=M-1
D=M
@THIS
M=D
@SP
AM=M-1
D=M
@ARG
M=D
@SP
AM=M-1
D=M
@LCL
M=D
@SP
AM=M-1
D=M
@R15
M=D
@R14
D=M
@SP
M=D
@R15
A=M;JMP
// function Sys.init 0
(Sys.init)
@SP
D=M
@LCL
AM=D
D=A
@SP
M=D
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.43)
// label Sys.init.WHILE
(Sys.init.WHILE)
// goto Sys.init.WHILE
@Sys.init.WHILE
0;JMP
